{"name":"Attiny85 pwm","tagline":"A light weight PWM library for attiny85 microcontroller","body":"### What is it?\r\nA lightweight PWM library port of Adafruit's [Adafruit_SoftServo](https://github.com/adafruit/Adafruit_SoftServo) for AtTiny85 micro-controllers. \r\n\r\n### What differs from original?\r\n1. refresh encapsulation\r\n\r\nThis library encapsulates the refresh cycle so you do not have to manually build the signal handler each time you use it. The downside to that, it uses slightly more memory than the original. The extra space consists of a globally scoped struct to hold the pin information and provide the refresh functionality. \r\n\r\n2. overloaded write()\r\n\r\nIf you prefer to write in degrees (say using a servo), you can pass an `uint8_t` degree value to write. Or if you choose to work on duty cycles, you can pass a `float` duty cycle between 0 and 1. \r\n\r\n### Who can use it?\r\nWorks with servos, actuators, and really anything that needs a PWM signal. Duty cycle is built on 20 microsecond intervals. \r\n\r\n### How to download from github:\r\n```\r\n$ cd your_library_path\r\n$ git clone https://github.com/anthonykulis/attiny85_pwm.git <optional-new-name>\r\n```\r\n\r\n### How to use:\r\n\r\n1. Include header\r\n```\r\n#include \"attiny85_pwm.h\"\r\n```\r\n\r\n2. Instantiate\r\n```\r\n//assuming PIN_ONE defined...\r\nAttiny85_PWM myPwm(PIN_ONE);\r\n```\r\n\r\n3. Write\r\n```\r\n// degrees?\r\nmyPwm.write(42);\r\n\r\n// optionally, duty cycle\r\nmyPwm.write(.42);\r\n```\r\n\r\n### Support or Contact\r\nHaving trouble with the library? Feel free to submit a ticket. ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}